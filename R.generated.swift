//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `icons`.
    static let icons = Rswift.FileResource(bundle: R.hostingBundle, name: "icons", pathExtension: "")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "icons", withExtension: "")`
    static func icons(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icons
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `Chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chat")
    /// Image `History`.
    static let history = Rswift.ImageResource(bundle: R.hostingBundle, name: "History")
    /// Image `Setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "Setting")
    /// Image `blueArrow`.
    static let blueArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "blueArrow")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `icontwitter100`.
    static let icontwitter100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icontwitter100")
    /// Image `inIconRound`.
    static let inIconRound = Rswift.ImageResource(bundle: R.hostingBundle, name: "inIconRound")
    /// Image `kounaien_small`.
    static let kounaien_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "kounaien_small")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `redArrow`.
    static let redArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "redArrow")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `yellowArrow`.
    static let yellowArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellowArrow")
    
    /// `UIImage(named: "Chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "History", bundle: ..., traitCollection: ...)`
    static func history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blueArrow", bundle: ..., traitCollection: ...)`
    static func blueArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icontwitter100", bundle: ..., traitCollection: ...)`
    static func icontwitter100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icontwitter100, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "inIconRound", bundle: ..., traitCollection: ...)`
    static func inIconRound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inIconRound, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "kounaien_small", bundle: ..., traitCollection: ...)`
    static func kounaien_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kounaien_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "redArrow", bundle: ..., traitCollection: ...)`
    static func redArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yellowArrow", bundle: ..., traitCollection: ...)`
    static func yellowArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowArrow, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MenuCell`.
    static let menuCell: Rswift.ReuseIdentifier<MenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "MenuCell")
    /// Reuse identifier `historyCell`.
    static let historyCell: Rswift.ReuseIdentifier<HistoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "historyCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MapViewController`, and contains static references to 4 segues.
    struct mapViewController {
      /// Segue identifier `toChatViewController`.
      static let toChatViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, ChatViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toChatViewController")
      /// Segue identifier `toHistoryViewController`.
      static let toHistoryViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, HistoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toHistoryViewController")
      /// Segue identifier `toLevelViewController`.
      static let toLevelViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, LevelViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toLevelViewController")
      /// Segue identifier `toSettingViewController`.
      static let toSettingViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, SettingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toSettingViewController")
      
      /// Optionally returns a typed version of segue `toChatViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toChatViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, ChatViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.toChatViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toHistoryViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toHistoryViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, HistoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.toHistoryViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toLevelViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toLevelViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, LevelViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.toLevelViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toSettingViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSettingViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, SettingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.toSettingViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let indicatorViewController = StoryboardViewControllerResource<IndicatorViewController>(identifier: "indicatorViewController")
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "Main"
      
      func indicatorViewController(_: Void = ()) -> IndicatorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: indicatorViewController)
      }
      
      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "History", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'History' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icontwitter100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icontwitter100' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "inIconRound", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'inIconRound' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'Main' as 'MenuViewController'.") }
        if _R.storyboard.main().indicatorViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'indicatorViewController' could not be loaded from storyboard 'Main' as 'IndicatorViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
